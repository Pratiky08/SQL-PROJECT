-- SQL PROJECT --

-- https://www.kaggle.com/datasets/swaptr/layoffs-2022

-- PART 1 DATA CLEANING

USE LAYOFFS_PROJECT;

SELECT * FROM LAYOFFS;

-- FIRST OF ALL WE WANT TO CREATE A COPY TABLE. THIS IS THE ONE WE WILL WORK ON AND CLEAN THE DATA.

CREATE TABLE LAYOFFS_COPY
LIKE LAYOFFS;

INSERT INTO LAYOFFS_COPY
SELECT * FROM
LAYOFFS;

SELECT * FROM LAYOFFS_COPY;

-- 1. CHECK FOR DUPLICATES AND REMOVE IF ANY.

-- ASSIGNING ROW NUMBER TO EACH ROW SO AS TO CHECK FOR DUPLICATES BY USING A CTE.

WITH DUPLICATE_CTE AS
(
SELECT *,
ROW_NUMBER() OVER(PARTITION BY COMPANY, LOCATION, INDUSTRY, TOTAL_LAID_OFF, PERCENTAGE_LAID_OFF,
 `DATE`, STAGE, COUNTRY, FUNDS_RAISED_MILLIONS) 
AS ROW_NUM
FROM LAYOFFS_COPY
) 
SELECT * FROM DUPLICATE_CTE
WHERE ROW_NUM > 1;

-- LOOKS LIKE THERE ARE 5 DUPLICATES. LETS CONFIRM THIS FOR COMPANY CASPER.

SELECT * FROM LAYOFFS_COPY
WHERE COMPANY = 'CASPER';

-- TO DELETE DUPLICATE ROWS, CREATING ANOTHER TABLE 

CREATE TABLE LAYOFFS_COPY2
LIKE LAYOFFS;

-- ADDING NEW COLUMN ROW_NUMBER AS ROW_NUM.

ALTER TABLE LAYOFFS_COPY2
ADD ROW_NUM INT;

SELECT * FROM LAYOFFS_COPY2;

INSERT INTO LAYOFFS_COPY2
SELECT *,
ROW_NUMBER() OVER(PARTITION BY COMPANY, LOCATION, INDUSTRY, TOTAL_LAID_OFF, PERCENTAGE_LAID_OFF,
 `DATE`, STAGE, COUNTRY, FUNDS_RAISED_MILLIONS) 
AS ROW_NUM
FROM LAYOFFS_COPY;

SELECT * FROM LAYOFFS_COPY2 
WHERE ROW_NUM > 1;

-- DELETING DUPLICATE DATA WHERE ROW_NUMBER IS GREATER THAN 1

DELETE 
FROM LAYOFFS_COPY2 
WHERE ROW_NUM > 1;

SELECT * FROM LAYOFFS_COPY2;

-- 2. STANDARDIZE THE DATA AND FIX ERRORS

SELECT COMPANY
FROM LAYOFFS_COPY2;

-- LOOKS LIKE THERE ARE SOME RECORDS IN COMPANY COLUMN WHERE TRIMMING IS REQUIRED 

UPDATE LAYOFFS_COPY2
SET COMPANY = TRIM(COMPANY);

SELECT *
FROM LAYOFFS_COPY2;

SELECT DISTINCT INDUSTRY 
FROM LAYOFFS_COPY2
ORDER BY 1;

-- CRYPTO HAS MULTIPLE VARIATIONS HENCE WE NEED TO STANDARDIZE THAT  

UPDATE LAYOFFS_COPY2
SET INDUSTRY = 'CRYPTO'
WHERE INDUSTRY LIKE '%CRYPTO%';

SELECT DISTINCT COUNTRY 
FROM LAYOFFS_COPY2
ORDER BY 1;

-- IN COUNTRY COLUMN SOMETIMES "UNITED STATES" IS MENTIONED AND SOMETIMES "UNITED STATES." STANDARDISING ALL AS "UNITED STATES"

UPDATE LAYOFFS_COPY2 
SET COUNTRY = TRIM(TRAILING '.' FROM COUNTRY)
WHERE COUNTRY LIKE 'UNITED STATES%';

-- LETS FIX DATE COLUMN

SELECT `DATE`,
STR_TO_DATE(`DATE`, '%m/%d/%Y')
FROM LAYOFFS_COPY2;

UPDATE LAYOFFS_COPY2 
SET `DATE` = STR_TO_DATE(`DATE`, '%m/%d/%Y');

SELECT * FROM LAYOFFS_COPY2;

-- CONVERTING DATATYPE OF `DATE` FROM TEXT TO DATE

ALTER TABLE LAYOFFS_COPY2
MODIFY COLUMN `DATE` DATE;

-- 3. Null Values and Blank Values

SELECT INDUSTRY
FROM LAYOFFS_COPY2;

-- IT SEEMS THAT THERE ARE SOME NULL AND EMPTY VALUES IN INDUSTRY COLUMN

SELECT *
FROM LAYOFFS_COPY2
WHERE INDUSTRY IS NULL OR INDUSTRY = '';

-- LETS TAKE A LOOK AT COMPANY AIRBNB

SELECT * FROM LAYOFFS_COPY2
WHERE COMPANY = 'AIRBNB';

-- LOOKS LIKE AIRBNB IS A TRAVEL COMPANY BUT IT'S NOT POPULATED
-- SO WRITING A QUERY SUCH THAT IF THERE IS ANOTHER ROW WITH SAME COMPANY NAME, IT WILL UPDATE IT TO NON NULL INDUSTRY VALUES

UPDATE LAYOFFS_COPY2
SET INDUSTRY = NULL 
WHERE INDUSTRY = '';

-- USING JOIN ON SAME TABLE WITH COMPANY AS COMMON FIELD TO COMPARE NON NULL AND NULL RECORDS 

SELECT T1.INDUSTRY, T2.INDUSTRY
FROM LAYOFFS_COPY2 T1
JOIN LAYOFFS_COPY2 T2
	ON T1.COMPANY = T2. COMPANY
WHERE (T1.INDUSTRY IS NULL OR T1.INDUSTRY = '')
AND T2.INDUSTRY IS NOT NULL ;   

-- WE NEED TO POPULATE THOSE NULLS WHICH ARE POSSIBLE

UPDATE LAYOFFS_COPY2 T1
JOIN LAYOFFS_COPY2 T2
	ON T1.COMPANY = T2.COMPANY
SET T1.INDUSTRY = T2.INDUSTRY 
WHERE T1.INDUSTRY IS NULL
AND T2.INDUSTRY IS NOT NULL ;   

-- 4. REMOVE ANY ROW OR COLUMNS WHICH ARE NOT USEFUL

SELECT * FROM LAYOFFS_COPY2
WHERE TOTAL_LAID_OFF IS NULL 
AND PERCENTAGE_LAID_OFF IS NULL;

-- ROWS WHERE BOTH "TOTAL_LAID_OFF" AND "PERCENTAGE_LAID_OFF" ARE NULL, DO NOT MAKE ANY SENSE AND HENCE DELETING THEM

DELETE FROM LAYOFFS_COPY2 
WHERE TOTAL_LAID_OFF IS NULL 
AND PERCENTAGE_LAID_OFF IS NULL;

-- COLUMN ROW_NUM WHICH WAS ADDED TO THE TABLE FOR DUPLICATES REMOVAL CAN BE DELETED NOW

ALTER TABLE LAYOFFS_COPY2
DROP COLUMN ROW_NUM;

SELECT * FROM LAYOFFS_COPY2;

-- THIS IS CLEANED DATA WHICH WILL BE USED FURTHER FOR EDA.

----------------------------------------------------------------------------------------------------

-- PART 2 EDA

-- LET US EXPLORE THE DATA AND TRY TO FIND SOME PATTERNS OR TRENDS

SELECT * FROM LAYOFFS_COPY2;

-- HAVE A LOOK AT MAXIMUM LAYOFF AND MAXIMUM LAYOFF PERCENTAGE

SELECT MAX(TOTAL_LAID_OFF) , MAX(PERCENTAGE_LAID_OFF)
FROM LAYOFFS_COPY2;

-- WATCHOUT FOR THOSE COMPANIES WHICH WERE 100% LAID OFF 

SELECT COMPANY, TOTAL_LAID_OFF
FROM LAYOFFS_COPY2
WHERE PERCENTAGE_LAID_OFF = 1
ORDER BY TOTAL_LAID_OFF DESC;

-- "KATERRA" IS AT THE TOP, WHICH LAID OFF 100% EMPLOYEES

SELECT MIN(`DATE`), MAX(`DATE`)
FROM LAYOFFS_COPY2;

-- THIS DATA RANGES BETWEEN 11 MARCH 2020 TO 06 MARCH 2023

SELECT COMPANY, SUM(TOTAL_LAID_OFF)
FROM LAYOFFS_COPY2
GROUP BY COMPANY
ORDER BY SUM(TOTAL_LAID_OFF) DESC;

-- IN THE GIVEN TIME PERIOD, AMAZON TOPS THE LIST WITH TOTAL LAID OFF OF 18150 FOLLOWED BY GOOGLE WITH 12000 AND META WITH 11000

SELECT INDUSTRY, SUM(TOTAL_LAID_OFF)
FROM LAYOFFS_COPY2
GROUP BY INDUSTRY
ORDER BY SUM(TOTAL_LAID_OFF) DESC;

-- CONSUMER INDUSTRY LAID OFF TOTAL 45182 EMPLOYEES WHERE AS MANUFACTURING INDUSTRY LAID OFF ONLY 20 EMPLYEES

SELECT COUNTRY, SUM(TOTAL_LAID_OFF)
FROM LAYOFFS_COPY2
GROUP BY COUNTRY
ORDER BY SUM(TOTAL_LAID_OFF) DESC;

-- UNITED STATES TOPS THE LIST WITH 256559 TOTAL LAID OFF, FOLLOWED BY INDIA WITH 35993 TOTAL LAID OFF

SELECT YEAR(`DATE`), SUM(TOTAL_LAID_OFF)
FROM LAYOFFS_COPY2
GROUP BY YEAR(`DATE`)
ORDER BY SUM(TOTAL_LAID_OFF) DESC;

-- CONSIDERING YEARWISE LAYOFFS, IN YEAR 2022 TOTAL OF 160661 EMPLOYEES WERE LAID OFF WHEREAS IN YEAR 2021 ONLY 15823 WERE LAID OFF

SELECT AVG(PERCENTAGE_LAID_OFF) 
FROM LAYOFFS_COPY2;

-- AVERAGE PERCENTAGE LAID OFF IS 25.8%

SELECT COMPANY, AVG(PERCENTAGE_LAID_OFF), SUM(TOTAL_LAID_OFF)
FROM LAYOFFS_COPY2
WHERE PERCENTAGE_LAID_OFF IS NOT NULL
GROUP BY COMPANY
ORDER BY AVG(PERCENTAGE_LAID_OFF) ASC;

-- EMPLOYEES LAID OFF PERCENTAGEWISE IS LOWEST IN "F5" AND "N26" COMPANIES WHICH IS ONLY 1%

SELECT * FROM LAYOFFS_COPY2;

SELECT FUNDS_RAISED_MILLIONS, COMPANY, INDUSTRY, TOTAL_LAID_OFF, PERCENTAGE_LAID_OFF, YEAR(`DATE`)
FROM LAYOFFS_COPY2
WHERE (FUNDS_RAISED_MILLIONS IS NOT NULL AND PERCENTAGE_LAID_OFF IS NOT NULL)
ORDER BY 1 DESC;

-- "NETFLIX" FROM MEDIA INDUSTRY RAISED MAXIMUM FUNDS BUT LAID OFF PERCENTAGE IS AROUND 3% ONLY.

SELECT FUNDS_RAISED_MILLIONS, COMPANY, INDUSTRY, TOTAL_LAID_OFF, PERCENTAGE_LAID_OFF, YEAR(`DATE`)
FROM LAYOFFS_COPY2
WHERE (FUNDS_RAISED_MILLIONS IS NOT NULL AND PERCENTAGE_LAID_OFF=1)
ORDER BY 1 DESC;

-- "BRITISHVOLT" COMPANY RAISED 2400 MILLION DOLLARS FUNDS AND IT LAID OFF 100% EMPLOYEES IN 2023.

SELECT COMPANY, YEAR(`DATE`), SUM(TOTAL_LAID_OFF)
FROM LAYOFFS_COPY2
GROUP BY COMPANY, YEAR(`DATE`)
ORDER BY 3 DESC;

-- "GOOGLE" LAID OFF THE MOST EMPLOYEES IN A SINGLE YEAR. THE COMPANY LAID OFF 12000 EMPLOYEES IN 2023. FOLLOWED BY META, AMZON, MICROSOFT.

